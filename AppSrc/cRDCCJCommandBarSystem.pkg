Use cCJStandardCommandBarSystem.pkg
Use cCJCommandBarSystem.pkg

// A pretty weird place for the augmented Deferred_Viewcommand, 
// but this package is usually used at the top of .src files.
// Command is used for calling general purpose messages defined
// at the bottom of views/modalpanels with parameters to
// initialize the panel with properties. The normal problem for
// Deferred_Views/CD_Popup modal panels is that trying to set a property
// when the panel hasn't been activated yet, generates a runtime error.
// 
// Sample Usage:
//    
//        Deferred_View Activate_oMy_Rpt for ;
//        Object oMy_rpt is a ReportView
//
//            Property Integer piID
//        End_Object
//      
//        // General purpose access method for the
//        // oMy_rpt view.
//        Procedure StartMyRpt Integer iID
//            Handle ho
//            Get Popup_Handle of oMy_rpt to ho
//            Set piId of ho to iID
//            Send Activate_oMy_Rpt
//        End_Procedure

#COMMAND Deferred_View R "AS""FOR" "OBJECT""DFOBJECT"
    Property Integer !1_obj 0  //track Id of view object

    // To return the handle of the actual view, creating it as needed
    Function !1_Handle Returns Handle
        Handle hoView
        Get !1_Obj to hoView     // Id of the view
        If (hoView = 0) Begin    // if not created, create it
            Send Cursor_wait to (Cursor_Control(Self))
            CompilerWarnings Off
            Gosub Create_!1
            CompilerWarnings On
            Get !1_Obj to hoView // this time it better be there!
            Send Cursor_ready to (Cursor_Control(Self))
        End
        Function_Return hoView
    End_Procedure

    Procedure !1    
        Integer obj#
        Get !1_Obj to Obj#
        If (Obj# = 0) Begin
            Send Cursor_wait to (Cursor_Control(Self))
            Gosub Create_!1
            Get !1_Obj to Obj#
            Send Cursor_ready to (Cursor_Control(Self))
        End
        Send Activate_View to Obj#
    End_Procedure

    // Add function that exists for modal panels, so we have one common function
    // for both Deferred_View's and CD_Popup Modal panels.
    Function Popup_Handle Returns Handle
        Handle hoView
        Get !1_Handle to hoView
        Function_Return hoView    
    End_Function
    
     Procedure Create_!4
          Handle hoView
          Get !1_Handle to hoView
     End_Procedure

    [Found ~Found] Begin
        Create_!1:
            Object !4 !5 !6 !7 !8  !9
            Set !1_obj to Self
#ENDCOMMAND

Class cRDCCJCommandBarSystem is a cCJCommandBarSystem
    
    Procedure Construct_Object
        Forward Send Construct_Object

        Set peRestoreLayout to rlNoSaveRestore // rlSaveRestoreAll
        Set pbTimerUpdate to True
        Set pbAutoResizeIcons to True
        Set pbLargeIcons to True
        #IF (!@ > 240)
            Set peVisualTheme to xtpThemeNativeWindows11 
        #ELSE
            Set peVisualTheme to xtpThemeOffice2016Word
        #ENDIF
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object

    End_Procedure

    Procedure OnCreateCommandBars
        Handle hoOptions
        Send DoChangeToolTipFormat
        Get OptionsObject to hoOptions 
        Send DisplayTabWorkspace
    End_Procedure
    
    Procedure DisplayTabWorkspace
        Variant vTab vPaintManager
        Handle hoTab hoPaintManager hoOptions
        Integer iSize

        If (not(IsComObjectCreated(Self))) Begin
            Procedure_Return
        End

        Get OptionsObject to hoOptions

        // Create the tab workspace object. It will get created for the Client_Area so
        // each view will be displayd on a separate tab-page (instead of the standard VDF MDI-interface)
        Get Create (RefClass(cCJTabWorkspace)) to hoTab
        Get ComShowTabWorkspace True to vTab
        // Connect the CodeJock side to the DataFlex proxy object.
        Set pvComObject of hoTab to vTab        
        // ToDo: Use this?
        Set ComAutoTheme of hoTab to False    

        // Create a paint manager object that is needed to set some
        // of the tab-workspace properties.
        Get Create (RefClass(cCJTabPaintManager)) to hoPaintManager
        Get ComPaintManager of hoTab          to vPaintManager
        Set pvComObject     of hoPaintManager to vPaintManager
        
        // Set theme for the tab-control headers
        Set ComColor of hoPaintManager to xtpTabColorVisualStudio2022
        // Set size for tab-control header icons
        Send ComSetIconSize of hoPaintManager 16 16   
        
        // Don't show the tab-pages "close" and next/prev buttons. 
        Set ComFlags of hoTab to xtpWorkspaceHideAll
        Send ComEnableGroups of hoTab

        Move 24 to iSize
        Send ComSetPopupIconSize of hoOptions iSize iSize
        // To show or not to show tab-page icons...
        Set ComShowIcons of hoPaintManager to True
        
        // Sets the tab-pages to display on the left side, instead of at the top:
        Set ComPosition of hoPaintManager to xtpTabPositionTop //xtpTabPositionLeft

        // This will truncate the middle part of long items
        //Set ComDrawTextPathEllipsis of hoPaintManager to True

        Move 32 to iSize
        Set piToolbarIconSize to iSize                                   
        // We _must_ have this for tooltips to show on tab-pages (views)
        Set ComToolTipBehaviour of hoPaintManager to xtpTabToolTipAlways 
        Send OnCreateTabbedWorkspace hoTab hoPaintManager
    End_Procedure

    // Toolbar tooltip settings:
    Procedure DoChangeToolTipFormat
        Variant vToolTip
        Handle  hoObject
        Integer iToolTipStyle
        Boolean bIsBalloonStyleSupported

        Get ComToolTipContext to vTooltip
        Get Create (RefClass(cCJToolTipContext)) to hoObject
        Set pvComObject of hoObject to vTooltip
        Move xtpToolTipStandard to iToolTipStyle
        
        // Baloon tooltip style requires IE 5.0 or later, so check if installed.
        // The ComShowTitleAndDescription also requires IE 5.0.
        Get ComIsBalloonStyleSupported of hoObject to bIsBalloonStyleSupported
        If (bIsBalloonStyleSupported = False) Begin
            // If not supported we cannot show baloon tooltip; use standard style instead.
            If (iToolTipStyle = xtpToolTipBalloon) Begin
                Move xtpToolTipStandard to iToolTipStyle
            End
        End
        If (bIsBalloonStyleSupported = True) Begin
            Send ComShowTitleAndDescription of hoObject True xtpToolTipIconInfo
        End
        
        Set ComStyle            of hoObject to iToolTipStyle
        Set ComShowOfficeBorder of hoObject to True
        Set ComShowShadow       of hoObject to True
        // Set the max width for a tooltip. 250 just seems to be a good
        // compromise. After 250 pixels the text will wrap to the next line automatically.
        Set  ComMaxTipWidth     of hoObject to 250 // In pixels
        Send Destroy            of hoObject
        
        If (phoStatusBar(ghoCommandBars)) Begin
            Send DoChangeToolTipFormat of (phoStatusBar(Self))
        End
    End_Procedure

    Procedure Set piToolbarIconSize Integer iSize
        Handle hoOptions

        If (not(IsComObjectCreated(Self))) Begin
            Procedure_Return
        End

        If (iSize < 16) Begin
            Move 32 to iSize
        End
        Set pbLargeIcons to (iSize = 32)
        Get OptionsObject to hoOptions
        Send ComSetIconSize of hoOptions False iSize iSize  // Set icon size for Toolbar buttons.
        Send ComRecalcLayout
    End_Procedure

End_Class
